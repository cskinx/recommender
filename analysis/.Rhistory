theme_minimal() +
#scale_y_continuous(trans="log10", labels = comma,
#                   breaks=base_breaks()) +
scale_x_continuous(trans="log10", labels = comma,
breaks=base_breaks()) +
ggtitle("Cumulative Sum of Articles per Species (x-axis log-scaled)") +
xlab("# Articles per Species") +
ylab("# Species")
cum_cnts %>%
arrange(desc(per_spec)) %>%
mutate(cumsum = cumsum(cnt)) %>%
ggplot() +
geom_area(aes(per_spec, cumsum), stat="identity", fill="#de2d26") +
theme_minimal() +
scale_y_continuous(trans="log10", labels = comma,
breaks=base_breaks()) +
scale_x_continuous(trans="log10", labels = comma,
breaks=base_breaks()) +
ggtitle("Cumulative Sum of Articles per Species (x-axis log-scaled)") +
xlab("# Articles per Species") +
ylab("# Species")
cum_cnts2 <- df %>%
group_by(TaxID) %>%
select(TaxID, PubMed_ID) %>%
distinct() %>%
summarise(per_spec = n()) %>%
arrange(desc(per_spec))
View(cum_cnts2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(readr)
library(scales)
library(knitr)
library(kableExtra)
setwd("~/Documents/MASTER/BiNNeN/datasets/pubmed_corpus")
df <- read_delim("data/gene2pubmed", delim="\t", col_types=cols(.default = "c")) %>%
rename(TaxID = `#tax_id`)
test_df = head(df, n=1000)
test_df
cum_cnts2
install.packages('rsconnect')
rsconnect::setAccountInfo(name='hopefully',
token='746FC6E3378738C510530BB4CD0278DB',
secret='igdXHACrZbA6IP6/7eIvTRRTd9hFqpgUYGK3iOYu')
rsconnect::setAccountInfo(name='hopefully',
token='746FC6E3378738C510530BB4CD0278DB',
secret='igdXHACrZbA6IP6/7eIvTRRTd9hFqpgUYGK3iOYu')
rsconnect::deployApp('/home/christopher/Documents/Dev/shiny')
shinyapps
shinyapps::appDependencies()
library(shiny)
install.packages('shiny')
rsconnect::deployApp('/home/christopher/Documents/Dev/shiny')
cands_lines <- cands_res %>%
gather(Recall, Precision, Reranked_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
library(tidyverse)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(svglite)
## from http://rpubs.com/Koundy/71792
## functions to make it nicer
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
## plot it nicely
nice_plot <- function(ggp) {
grid.arrange((ggp + scale_fill_Publication() +
theme_Publication()), nrow=1)
}
nice_plot2 <- function(ggp1, ggp2) {
grid.arrange(
(ggp1 + scale_fill_Publication() +
theme_Publication()),
(ggp2 + scale_fill_Publication() +
theme_Publication()), nrow=1)
}
#######################################################
## RESULTS
## NER results
ner_res <- tibble::tribble(
~Corpus,  ~Tagger,     ~Metric, ~Score,
"BC2 Test", "HUNER1", "Precision", 0.2774,
"BC2 Test", "HUNER2", "Precision", 0.5531,
"BC2 Test", "HUNER1",    "Recall", 0.7471,
"BC2 Test", "HUNER2",    "Recall", 0.7362,
"BC2 Test", "HUNER1",  "F1-Score", 0.4046,
"BC2 Test", "HUNER2",  "F1-Score", 0.6317,
"BC5 Test", "HUNER1", "Precision", 0.3155,
"BC5 Test", "HUNER2", "Precision", 0.5719,
"BC5 Test", "HUNER1",    "Recall",  0.641,
"BC5 Test", "HUNER2",    "Recall", 0.6749,
"BC5 Test", "HUNER1",  "F1-Score", 0.4229,
"BC5 Test", "HUNER2",  "F1-Score", 0.6191
)
ner_bars2 <- ner_res %>%
# filter(Corpus=="BC2 Test") %>%
ggplot(aes(Metric, Score, fill=Tagger)) +
geom_bar(stat="identity", position="dodge") +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
ggtitle("Test Corpus NER Results") +
geom_text(aes(label=paste0(Score*100, "%")), position=position_dodge(width=0.9), vjust=1.7) +
facet_wrap(~ Corpus)
plot = nice_plot(ner_bars2)
ggsave(file="ner_res.png", plot=plot, width=14, height=7)
#############################
## Lucene Candidate Cnt
cands_res <- tibble::tribble(
~Cands_per_index, ~Correct,  ~Recall, ~Precision, ~Candidates_per_ment, ~Reranked_corr, ~Reranked_wrong,     ~Reranked_acc,
1,      697, "69.84%",   "18.97%",                 3.68,            671,             327, 0.672344689378757,
2,      800, "80.16%",   "11.29%",                  7.1,            744,             254, 0.745490981963928,
3,      844, "84.57%",    "8.26%",                10.23,            768,             230, 0.769539078156313,
4,      878, "87.98%",    "6.62%",                13.29,            789,             209, 0.790581162324649,
5,      891, "89.28%",    "5.55%",                16.09,            793,             205, 0.794589178356713,
6,      905, "90.68%",    "4.85%",                18.68,            792,             206, 0.793587174348697,
7,      914, "91.58%",    "4.32%",                 21.2,            800,             198, 0.801603206412826,
8,      920, "92.18%",    "3.91%",                23.55,            800,             198, 0.801603206412826,
9,      925, "92.69%",    "3.60%",                25.76,            797,             201, 0.798597194388778,
10,      927, "92.89%",    "3.33%",                 27.9,            797,             201, 0.798597194388778,
11,      930, "93.19%",    "3.11%",                29.95,            795,             203, 0.796593186372745,
12,      934, "93.59%",    "2.92%",                32.03,            796,             202, 0.797595190380762,
13,      934, "93.59%",    "2.75%",                   34,            795,             203, 0.796593186372745,
14,      934, "93.59%",    "2.61%",                 35.9,            794,             204,  0.79559118236473,
15,      935, "93.69%",    "2.48%",                37.75,            794,             204,  0.79559118236473,
16,      936, "93.79%",    "2.37%",                39.57,            795,             203, 0.796593186372745,
17,      936, "93.79%",    "2.27%",                41.24,            795,             203, 0.796593186372745,
18,      936, "93.79%",    "2.19%",                42.84,            794,             204,  0.79559118236473,
19,      936, "93.79%",    "2.11%",                44.42,            794,             204,  0.79559118236473,
20,      937, "93.89%",    "2.04%",                45.95,            795,             203, 0.796593186372745,
21,      937, "93.89%",    "1.98%",                 47.4,            795,             203, 0.796593186372745,
22,      939, "94.09%",    "1.93%",                48.72,            795,             203, 0.796593186372745,
23,      941, "94.29%",    "1.89%",                50.01,            793,             205, 0.794589178356713,
24,      941, "94.29%",    "1.84%",                51.19,            793,             205, 0.794589178356713,
25,      941, "94.29%",    "1.80%",                52.29,            793,             205, 0.794589178356713,
26,      942, "94.39%",    "1.77%",                53.32,            793,             205, 0.794589178356713,
27,      943, "94.49%",    "1.74%",                54.24,            794,             204,  0.79559118236473,
28,      943, "94.49%",    "1.72%",                55.06,            794,             204,  0.79559118236473,
29,      944, "94.59%",    "1.70%",                55.78,            794,             204,  0.79559118236473,
30,      944, "94.59%",    "1.68%",                56.44,            794,             204,  0.79559118236473
)
cands_lines <- cands_res %>%
gather(Recall, Precision, Reranked_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
## Reranking weights
# https://stackoverflow.com/a/13016912
?gather
??gather
library(tidyr)
cands_lines <- cands_res %>%
gather(Recall, Precision, Reranked_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
cands_lines()
cands_lines
cands_res <- tibble::tribble(
~Cands_per_index, ~Correct, ~Recall, ~Precision, ~Candidates_per_ment, ~Reranked_corr, ~Reranked_wrong,     ~Reranked_acc,
1,      697,  0.6984,     0.1897,                 3.68,            671,             327, 0.672344689378757,
2,      800,  0.8016,     0.1129,                  7.1,            744,             254, 0.745490981963928,
3,      844,  0.8457,     0.0826,                10.23,            768,             230, 0.769539078156313,
4,      878,  0.8798,     0.0662,                13.29,            789,             209, 0.790581162324649,
5,      891,  0.8928,     0.0555,                16.09,            793,             205, 0.794589178356713,
6,      905,  0.9068,     0.0485,                18.68,            792,             206, 0.793587174348697,
7,      914,  0.9158,     0.0432,                 21.2,            800,             198, 0.801603206412826,
8,      920,  0.9218,     0.0391,                23.55,            800,             198, 0.801603206412826,
9,      925,  0.9269,      0.036,                25.76,            797,             201, 0.798597194388778,
10,      927,  0.9289,     0.0333,                 27.9,            797,             201, 0.798597194388778,
11,      930,  0.9319,     0.0311,                29.95,            795,             203, 0.796593186372745,
12,      934,  0.9359,     0.0292,                32.03,            796,             202, 0.797595190380762,
13,      934,  0.9359,     0.0275,                   34,            795,             203, 0.796593186372745,
14,      934,  0.9359,     0.0261,                 35.9,            794,             204,  0.79559118236473,
15,      935,  0.9369,     0.0248,                37.75,            794,             204,  0.79559118236473,
16,      936,  0.9379,     0.0237,                39.57,            795,             203, 0.796593186372745,
17,      936,  0.9379,     0.0227,                41.24,            795,             203, 0.796593186372745,
18,      936,  0.9379,     0.0219,                42.84,            794,             204,  0.79559118236473,
19,      936,  0.9379,     0.0211,                44.42,            794,             204,  0.79559118236473,
20,      937,  0.9389,     0.0204,                45.95,            795,             203, 0.796593186372745,
21,      937,  0.9389,     0.0198,                 47.4,            795,             203, 0.796593186372745,
22,      939,  0.9409,     0.0193,                48.72,            795,             203, 0.796593186372745,
23,      941,  0.9429,     0.0189,                50.01,            793,             205, 0.794589178356713,
24,      941,  0.9429,     0.0184,                51.19,            793,             205, 0.794589178356713,
25,      941,  0.9429,      0.018,                52.29,            793,             205, 0.794589178356713,
26,      942,  0.9439,     0.0177,                53.32,            793,             205, 0.794589178356713,
27,      943,  0.9449,     0.0174,                54.24,            794,             204,  0.79559118236473,
28,      943,  0.9449,     0.0172,                55.06,            794,             204,  0.79559118236473,
29,      944,  0.9459,      0.017,                55.78,            794,             204,  0.79559118236473,
30,      944,  0.9459,     0.0168,                56.44,            794,             204,  0.79559118236473
)
cands_lines <- cands_res %>%
gather(Recall, Precision, Reranked_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
cands_lines
#############################
## Lucene Candidate Cnt
cands_res <- tibble::tribble(
~Cands_per_index, ~Correct, ~Recall, ~Precision, ~Candidates_per_ment, ~Rerank_corr, ~Rerank_wrong,       ~Rerank_acc,
1,      697,  0.6984,     0.1897,                 3.68,          671,           327, 0.672344689378757,
2,      800,  0.8016,     0.1129,                  7.1,          744,           254, 0.745490981963928,
3,      844,  0.8457,     0.0826,                10.23,          768,           230, 0.769539078156313,
4,      878,  0.8798,     0.0662,                13.29,          789,           209, 0.790581162324649,
5,      891,  0.8928,     0.0555,                16.09,          793,           205, 0.794589178356713,
6,      905,  0.9068,     0.0485,                18.68,          792,           206, 0.793587174348697,
7,      914,  0.9158,     0.0432,                 21.2,          800,           198, 0.801603206412826,
8,      920,  0.9218,     0.0391,                23.55,          800,           198, 0.801603206412826,
9,      925,  0.9269,      0.036,                25.76,          797,           201, 0.798597194388778,
10,      927,  0.9289,     0.0333,                 27.9,          797,           201, 0.798597194388778,
11,      930,  0.9319,     0.0311,                29.95,          795,           203, 0.796593186372745,
12,      934,  0.9359,     0.0292,                32.03,          796,           202, 0.797595190380762,
13,      934,  0.9359,     0.0275,                   34,          795,           203, 0.796593186372745,
14,      934,  0.9359,     0.0261,                 35.9,          794,           204,  0.79559118236473,
15,      935,  0.9369,     0.0248,                37.75,          794,           204,  0.79559118236473,
16,      936,  0.9379,     0.0237,                39.57,          795,           203, 0.796593186372745,
17,      936,  0.9379,     0.0227,                41.24,          795,           203, 0.796593186372745,
18,      936,  0.9379,     0.0219,                42.84,          794,           204,  0.79559118236473,
19,      936,  0.9379,     0.0211,                44.42,          794,           204,  0.79559118236473,
20,      937,  0.9389,     0.0204,                45.95,          795,           203, 0.796593186372745,
21,      937,  0.9389,     0.0198,                 47.4,          795,           203, 0.796593186372745,
22,      939,  0.9409,     0.0193,                48.72,          795,           203, 0.796593186372745,
23,      941,  0.9429,     0.0189,                50.01,          793,           205, 0.794589178356713,
24,      941,  0.9429,     0.0184,                51.19,          793,           205, 0.794589178356713,
25,      941,  0.9429,      0.018,                52.29,          793,           205, 0.794589178356713,
26,      942,  0.9439,     0.0177,                53.32,          793,           205, 0.794589178356713,
27,      943,  0.9449,     0.0174,                54.24,          794,           204,  0.79559118236473,
28,      943,  0.9449,     0.0172,                55.06,          794,           204,  0.79559118236473,
29,      944,  0.9459,      0.017,                55.78,          794,           204,  0.79559118236473,
30,      944,  0.9459,     0.0168,                56.44,          794,           204,  0.79559118236473
)
cands_lines <- cands_res %>%
gather(Recall, Precision, Reranked_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
cands_lines
## Reranking weights
# https://stackoverflow.com/a/13016912
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line()
cands_lines
plot = nice_plot(cands_lines)
## plot it nicely
nice_plot <- function(ggp) {
grid.arrange((ggp + scale_fill_Publication() +
theme_Publication() +
scale_colour_Publication()), nrow=1)
}
nice_plot2 <- function(ggp1, ggp2) {
grid.arrange(
(ggp1 + scale_fill_Publication() +
theme_Publication()),
(ggp2 + scale_fill_Publication() +
theme_Publication()), nrow=1)
}
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank_acc, key="Metric", value="Score") %>%
ggplot(aes(Cands_per_index, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%"))
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank_acc, key="Metric", value="Score") %>%
ggplot(aes(Candidates.per.Index, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%"))
#############################
## Lucene Candidate Cnt
cands_res <- tibble::tribble(
~Candidates.per.Index, ~Correct, ~Recall, ~Precision, ~Candidates.per.Mention, ~Rerank_corr, ~Rerank_wrong,  ~Rerank.Accuracy,
1,      697,  0.6984,     0.1897,                    3.68,          671,           327, 0.672344689378757,
2,      800,  0.8016,     0.1129,                     7.1,          744,           254, 0.745490981963928,
3,      844,  0.8457,     0.0826,                   10.23,          768,           230, 0.769539078156313,
4,      878,  0.8798,     0.0662,                   13.29,          789,           209, 0.790581162324649,
5,      891,  0.8928,     0.0555,                   16.09,          793,           205, 0.794589178356713,
6,      905,  0.9068,     0.0485,                   18.68,          792,           206, 0.793587174348697,
7,      914,  0.9158,     0.0432,                    21.2,          800,           198, 0.801603206412826,
8,      920,  0.9218,     0.0391,                   23.55,          800,           198, 0.801603206412826,
9,      925,  0.9269,      0.036,                   25.76,          797,           201, 0.798597194388778,
10,      927,  0.9289,     0.0333,                    27.9,          797,           201, 0.798597194388778,
11,      930,  0.9319,     0.0311,                   29.95,          795,           203, 0.796593186372745,
12,      934,  0.9359,     0.0292,                   32.03,          796,           202, 0.797595190380762,
13,      934,  0.9359,     0.0275,                      34,          795,           203, 0.796593186372745,
14,      934,  0.9359,     0.0261,                    35.9,          794,           204,  0.79559118236473,
15,      935,  0.9369,     0.0248,                   37.75,          794,           204,  0.79559118236473,
16,      936,  0.9379,     0.0237,                   39.57,          795,           203, 0.796593186372745,
17,      936,  0.9379,     0.0227,                   41.24,          795,           203, 0.796593186372745,
18,      936,  0.9379,     0.0219,                   42.84,          794,           204,  0.79559118236473,
19,      936,  0.9379,     0.0211,                   44.42,          794,           204,  0.79559118236473,
20,      937,  0.9389,     0.0204,                   45.95,          795,           203, 0.796593186372745,
21,      937,  0.9389,     0.0198,                    47.4,          795,           203, 0.796593186372745,
22,      939,  0.9409,     0.0193,                   48.72,          795,           203, 0.796593186372745,
23,      941,  0.9429,     0.0189,                   50.01,          793,           205, 0.794589178356713,
24,      941,  0.9429,     0.0184,                   51.19,          793,           205, 0.794589178356713,
25,      941,  0.9429,      0.018,                   52.29,          793,           205, 0.794589178356713,
26,      942,  0.9439,     0.0177,                   53.32,          793,           205, 0.794589178356713,
27,      943,  0.9449,     0.0174,                   54.24,          794,           204,  0.79559118236473,
28,      943,  0.9449,     0.0172,                   55.06,          794,           204,  0.79559118236473,
29,      944,  0.9459,      0.017,                   55.78,          794,           204,  0.79559118236473,
30,      944,  0.9459,     0.0168,                   56.44,          794,           204,  0.79559118236473
)
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank_acc, key="Metric", value="Score") %>%
ggplot(aes(Candidates.per.Index, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%"))
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
gather(Recall, Precision, Rerank.Accuracy, key="Metric", value="Score") %>%
ggplot(aes(Candidates.per.Index, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%"))
plot = nice_plot(cands_lines)
gather(Recall, Precision, `Rerank Accuracy`, key="Metric", value="Score") %>%
ggplot(aes(`Candidates per Index`, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
mutate(`Rerank Accuracy` = Rerank.Accuracy,
`Candidates per Index` = Candidates.per.Index) %>%
gather(Recall, Precision, `Rerank Accuracy`, key="Metric", value="Score") %>%
ggplot(aes(`Candidates per Index`, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
plot = nice_plot(cands_lines)
cands_lines <- cands_res %>%
mutate(`Rerank Accuracy` = Rerank.Accuracy,
`Candidates per Index` = Candidates.per.Index) %>%
gather(Recall, Precision, `Rerank Accuracy`, key="Metric", value="Score") %>%
ggplot(aes(`Candidates per Index`, Score, color=Metric)) +
geom_line() +
scale_y_continuous(labels = function(x) paste0(x*100, "%"))
plot = nice_plot(cands_lines)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
list.files()
setwd("/home/christopher/Documents/MASTER/BiNNeN/analyses")
list.files()
setwd("~/Documents/MASTER/BiNNeN/analyses")
list.files()
list.files(".")
list.files("~/Documents/MASTER/BiNNeN/analyses")
df <- read_delim("data/gene2pubmed", delim="\t", col_types=cols(.default = "c"))
library(dplyr)
library(ggplot2)
library(readr)
library(scales)
library(knitr)
library(kableExtra)
df <- read_delim("data/gene2pubmed", delim="\t", col_types=cols(.default = "c"))
## load game data (only used for game names here)
games_r <- fromJSON("../data/full_games.json")
## load game data (only used for game names here)
setwd("/home/christopher/Documents/Dev/Square Enix Test/analysis")
games_r <- fromJSON("../data/full_games.json")
library(jsonlite)
games_r <- fromJSON("../data/full_games.json")
games_tbl <- as_tibble(games_r)
library(dplyr)
games_tbl <- as_tibble(games_r)
## ony names, without missing ones
game_names <- games_tbl %>%
mutate(game_id = as.numeric(id)) %>%
select(game_id, name) %>%
filter(nchar(name) > 0)
library(dplyr)
library(readr)
library(ggplot2)
library(jsonlite)
## loader data
df <- read_delim("../data/user_games.csv", delim="\t") %>%
rename(user_id = user_steamid,
game_id = appid)
## how many in total?
df %>%
summarise(total_users = n_distinct(user_id),
total_games = n_distinct(game_id))
## how many games in average?
df %>%
group_by(user_id) %>%
summarise(n = n()) %>%
arrange(-n) %>%
View()
summarise(avg_games = mean(n),
min_games = min(n),
max_games = max(n))
## how many games per user?
p <- df %>%
group_by(user_id) %>%
summarise(game_cnt = n()) %>%
ggplot() +
geom_bar(aes(x=reorder(user_id, -game_cnt), y=game_cnt),
stat="identity",
fill="#C80000",
color="#C80000") +
scale_y_continuous(breaks=seq(0, 600, by= 100)) +
xlab("Users") +
ylab("Number of Games") +
ggtitle("Number of Games per User") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(file="games_per_user.png", plot=p, width=4, height=4)
## how many users per game?
game_users <- df %>%
group_by(game_id) %>%
summarise(user_cnt = n())
p <- game_users %>%
ggplot() +
geom_bar(aes(x=reorder(game_id, -user_cnt), y=user_cnt),
stat="identity",
fill="#C80000",
color="#C80000") +
scale_y_continuous(breaks=seq(0, 250, by= 50)) +
xlab("Games") +
ylab("Number of Users") +
ggtitle("Number of Users per Game") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(file="users_per_game.png", plot=p, width=4, height=4)
## load game data (only used for game names here)
setwd("/home/christopher/Documents/Dev/Square Enix Test/analysis")
games_r <- fromJSON("../data/full_games.json")
games_tbl <- as_tibble(games_r)
## ony names, without missing ones
game_names <- games_tbl %>%
mutate(game_id = as.numeric(id)) %>%
select(game_id, name) %>%
filter(nchar(name) > 0)
## game co-occurences
total_users = count(unique(df["user_id"])) %>% first()
coocs_mat <- df %>%
left_join(df, by=c("user_id")) %>%
filter(!is.na(game_id.y)) %>%
filter(game_id.x != game_id.y) %>%
filter(game_id.x != 391220 & game_id.y != 391220) %>%
group_by(game_id.x, game_id.y) %>%
summarise(coocs = n()) %>%
left_join(game_users, by=c("game_id.x" = "game_id")) %>%
group_by(game_id.x, game_id.y) %>%
mutate(cooc_factor = coocs / user_cnt) %>%
ungroup()
## see top co-occuring games
coocs_mat %>%
filter(coocs > 15) %>%
arrange(-cooc_factor) %>%
head(200) %>%
inner_join(game_names, by=c("game_id.x" = "game_id")) %>%
inner_join(game_names, by=c("game_id.y" = "game_id")) %>%
select(game1 = name.x, game2 = name.y) %>%
View()
## see least co-occuring games
coocs_mat %>%
filter(coocs > 15) %>%
arrange(cooc_factor) %>%
head(200) %>%
inner_join(game_names, by=c("game_id.x" = "game_id")) %>%
inner_join(game_names, by=c("game_id.y" = "game_id")) %>%
select(game1 = name.x, game2 = name.y) %>%
View()
